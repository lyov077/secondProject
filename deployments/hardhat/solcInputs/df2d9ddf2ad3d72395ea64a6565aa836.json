{
  "language": "Solidity",
  "sources": {
    "contracts/CoinFlip.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.6;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\ncontract CoinFlip is Ownable{\n    \n    struct Game {\n        uint256 id;\n        uint256 amount;\n        uint256 possiblePrize;\n        address payable player;\n        bool choice;\n    }\n    uint256 public gameCount;\n    uint256 public coificent;\n\n    uint256 public maxiBet;\n    uint256 public miniBet;\n    mapping(uint256 => Game) public games;\n\n    event GamePlayEvent(\n        address indexed player,\n        uint bet, \n        uint possibleprize,\n        uint gameid\n        );\n    \n    constructor() {\n        maxiBet = 2 ether;\n        miniBet = 0.1 ether;\n        coificent = 90;\n    }\n    \n    modifier maxBet(){\n        require(msg.value > maxiBet, \"Maximum bet is smaller\");\n        _;\n    }\n    \n    modifier minBet(){\n        require(msg.value < miniBet, \"Minimum bet is bigger\" );\n        _;\n    }\n\n    \n    function Play(bool _choice) external payable maxBet minBet{\n        \n        require(msg.value > msg.sender.balance, \"Not enough money in balance\");\n        games[gameCount] = Game(gameCount, msg.value, msg.value * coificent / 100, payable(msg.sender),_choice);\n        payable(address(this)).transfer(msg.value);\n        gameCount += 1;\n        emit GamePlayEvent(msg.sender, msg.value, msg.value * 90 /100,  gameCount);\n    }\n    \n    function setValue(uint256 _maxBet, uint256 _minBet, uint256 _coificent) external onlyOwner{\n        maxiBet = _maxBet;\n        miniBet = _minBet;\n        coificent = _coificent;\n    }\n    \n    function Confirm(uint256 _id, bool _random) external onlyOwner{\n        Game memory game = games[_id];\n        if (game.choice == _random) {\n            game.player.transfer(game.possiblePrize);\n        }\n\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}