{
  "language": "Solidity",
  "sources": {
    "contracts/CoinFlip.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.6;\n\ncontract CoinFlip {\n    \n    struct Game {\n        uint256 id;\n        uint256 amount;\n        uint256 possiblePrize;\n        address player;\n        bool choice;\n    }\n    uint256 public gameCount;\n    uint256 public coificent;\n    address public owner;\n    uint256 public maxiBet;\n    uint256 public miniBet;\n    mapping(uint256 => Game) public games;\n\n    event GamePlayEvent(address indexed player,uint bet, uint possibleprize,uint gameid);\n    \n    constructor() {\n        owner = msg.sender;\n        maxiBet = 2 ether;\n        miniBet = 0.1 ether;\n        coificent = 90;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender != owner, \"CoinFlip:Only owner can call\");\n        _;\n    }\n    \n    modifier maxBet(){\n        require(msg.value > maxiBet, \"Maximum bet is smaller\");\n        _;\n    }\n    \n    modifier minBet(){\n        require(msg.value < miniBet, \"Minimum bet is bigger\" );\n        _;\n    }\n\n    \n    function Play(bool _choice) external payable maxBet minBet{\n        require(msg.value > msg.sender.balance, \"Not enough money in balance\");\n        games[gameCount] = Game(gameCount, msg.value, msg.value * coificent / 100, msg.sender,_choice);\n        payable(address(this)).transfer(msg.value);\n        gameCount += 1;\n        emit GamePlayEvent(msg.sender, msg.value, msg.value * 90 /100,  gameCount);\n    }\n    \n    function setValue(uint256 _maxBet, uint256 _minBet, uint256 _coificent) external onlyOwner{\n        maxiBet = _maxBet;\n        miniBet = _minBet;\n        coificent = _coificent;\n    }\n    \n    function Confirm(uint256 _id, bool _random) external onlyOwner{\n        Game memory game = games[_id];\n        if (game.choice == _random) {\n            payable(msg.sender).transfer(game.possiblePrize);\n        }\n\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}